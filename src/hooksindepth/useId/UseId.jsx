import { useId } from 'react'

// A functional component that uses useId to generate unique IDs
const UseId = () => {
  // Important: useId hook generates a unique ID prefix for each call
  const nameId = useId();
  const emailId = useId();
  const passwordId = useId();
  // Parameters: useId does not take any parameters.

  // Example of concatenating IDs to create a unique ID for another element
  const confirmPasswordId = useId(); // Concatenating to create a unique ID


  return (
    <form>
      {/* Important: Label uses htmlFor attribute linked to the input's ID */}
      <label htmlFor={nameId}>Name:</label>
      {/* The input field uses the unique ID generated by useId */}
      <input id={nameId} type="text" name="name" />

      {/* Label for the email input field */}
      <label htmlFor={emailId}>Email:</label>
      {/* Important: Another unique ID is generated for the email input */}
      <input id={emailId} type="email" name="email" />

      {/* Label for the password input field */}
      <label htmlFor={passwordId}>Password:</label>
      {/* Important: A unique ID for the password input */}
      <input id={passwordId} type="password" name="password" />

      {/* Label for the password input field */}
      <label htmlFor={confirmPasswordId + 'confirmPassword'}>Confirm Password:</label>
      {/* Important: A unique ID for the password input */}
      <input id={confirmPasswordId + 'confirmPassword'} type="password" name="confirm-password" />

      {/* A submit button for the form */}
      <button type="submit">Submit</button>
    </form>
  );
};

// Export the component to be used in other parts of the application
export default UseId;

// Note: useId should not be used to generate keys in a list.

/*
  Important Points:
  1. useId generates stable and unique IDs that are consistent across server and client renders.
  2. It is primarily used to ensure accessibility, particularly for elements like input fields that require unique IDs.
  3. In the example, each form input field has a unique ID generated by useId, which is linked to its corresponding label using the htmlFor attribute.
  4. Using useId is crucial in SSR (Server-Side Rendering) environments to avoid mismatches between server-rendered and client-rendered IDs.
  5. useId should not be used to generate keys in a list; keys should be stable and unique identifiers that do not change between renders.
*/
